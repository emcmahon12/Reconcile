#imports
import os
import pandas as pd
import re
from difflib import get_close_matches
#stuff including difflib and fitz was chatGPT helped TODO: cite/document better which was which
import fitz  

# load internal
InternalData = pd.read_csv("data/internal_trades.csv")

# Helper to extract trade fields from a confirmation PDF
def DataExtract(filepath):
    """
   Takes in a file and, extracts  trade details from a PDF confirmation file using regex. Returns 
   a dictionary with the needed trade details
    """
    doc = fitz.open(filepath)
    text = ""
    for page in doc:
        text += page.get_text()

    trade = {}

    # Use regex to extract values from known structure
    #cite note chatgpt helped with regex
    trade['TradeID'] = re.search(r"Trade ID:\s*(\w+)", text).group(1)
    trade['timestamp'] = re.search(r"Trade Date:\s*([^\n]+)", text).group(1)
    trade['style'] = re.search(r"Option Style:\s*(\w+)", text).group(1)
    trade['TypeOption'] = re.search(r"Option Type:\s*(\w+)", text).group(1)
    trade['symbol'] = re.search(r"Index:\s*(\w+)", text).group(1)
    trade['quantity'] = int(re.search(r"Number of Options:\s*(\d+)", text).group(1))
    trade['price'] = float(re.search(r"Strike Price:\s*\$(\d+\.\d+)", text).group(1))

    return trade

#this is a helper function 
# find best match in internal data with tolerance
def InternalMatch(CurrentTrade, quantityTolerance=3, priceTolerance=2.0):
    """
    Takes in a trade, and tolerances, attempts to find a trade that matches in the internal data. Uses the trade dict
    made in DataExtract.

    Matching is done through:
    Fuzzy symbol matching (difflib.get_close_matches) (ML technique for similar mataches in symbols ie APL and APPL)
    Exact match on option style and type. (most obvious)
    Tolerance matching on quantity and price (tiny price errors or quantity errors)

    Returns a tuple with the matching record held as a dict and a status message saying match or no
    """
    # Fuzzy match on symbol
    symbolMatches = get_close_matches(CurrentTrade['symbol'], InternalData['symbol'].unique(), n=3, cutoff=0.7)
    if not symbolMatches:
        return None, "No similar symbol found"

    for symbol in symbolMatches:
        possibleMatches = InternalData[
            (InternalData['symbol'] == symbol) & #mataching on fuzzy symbol
            (InternalData['style'] == CurrentTrade['style']) & #exact match for option styles
            (InternalData['typeOption'] == CurrentTrade['TypeOption']) & #exact for option type
            (abs(InternalData['quantity'] - CurrentTrade['quantity']) <= quantityTolerance) & #quanity within tol
            (abs(InternalData['price'] - CurrentTrade['price']) <= priceTolerance) #price within tol
        ]
        if not possibleMatches.empty:
            return possibleMatches.iloc[0].to_dict(), "Matched"

    return None, "No match within tolerance"


# match all confirmation PDFs
def MatchConfirm(ConfirmFolder="confirmations/external"):
    """
    Takes in a folder, processes all the folder, extracts trade data from each,
    and attempts to match. Essentially running all above. Returns a pd df with results.
    """
    results = []
    for filename in os.listdir(ConfirmFolder):
        if not filename.endswith(".pdf"):
            continue

        filepath = os.path.join(ConfirmFolder, filename)
        try:
            extracted = DataExtract(filepath)
            match, status = InternalMatch(extracted)

            # Extract ground truth InternalNum from filename (e.g., '00042.pdf' -> 42)
            true_internal_num = int(filename.replace(".pdf", ""))
            
            # Determine if match was correct
            matched_correctly = (
                match is not None and 
                'InternalNum' in match and 
                int(match['InternalNum']) == true_internal_num
            )

            results.append({
                "filename": filename,
                "TradeID": extracted["TradeID"],
                "symbol": extracted["symbol"],
                "matched_symbol": match['symbol'] if match else None,
                "matched_internal_num": match["InternalNum"] if match else None,
                "true_internal_num": true_internal_num,
                "status": status,
                "matched_correctly": matched_correctly
            })
        except Exception as e:
            results.append({
                "filename": filename,
                "TradeID": "N/A",
                "symbol": "N/A",
                "matched_symbol": None,
                "matched_internal_num": None,
                "true_internal_num": None,
                "status": f"Error: {e}",
                "matched_correctly": False
            })

    return pd.DataFrame(results)

# Run and report
if __name__ == "__main__":
    report = MatchConfirm()
    report.to_csv("data/match_report.csv", index=False)

    matched = report[report["status"] == "Matched"]
    CorrectMatches = report[report["matched_correctly"] == True]

    print(f" {len(matched)} of {len(report)} files matched successfully.")
    print(f"True Matching Accuracy: {len(CorrectMatches) / len(report):.2%}")
